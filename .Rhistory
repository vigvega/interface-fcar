status = "primary",
div(style = "height: 70vh; overflow-y: auto; align-items: center;",
h5("Concept selected:"),
verbatimTextOutput("conceptSelected"),
h5("Upper neighbours:"),
verbatimTextOutput("upperNeighbours"),
h5("Lower neighbours:"),
verbatimTextOutput("lowerNeighbours")
)
)
)
),
column(12,
div(style = "display: flex; align-items: center;",
div(
actionBttn("btnGoBack", "Go back", icon = icon("arrow-left"),
style = "unite", size = "sm", color = "primary")
),
div(style = "margin-left: auto; display: flex; gap: 10px;",
actionBttn("createLatexConcepts", "Create table in LaTeX format", icon = icon("leaf"),
style = "material-circle", size = "sm", color = "primary"),
downloadBttn("downloadRdsConp", "Download",
style = "material-circle", size = "sm", color = "primary"),
actionBttn("btnGoImplications", "Go to implications", icon = icon("arrow-right"),
style = "unite", size = "sm", color = "primary")
)
)
)
),
uiUploadData,
uiBasicOperations,
uiImplications
#uiConcepts
)
)
fc
fc$plot()
fc$concepts$plot()
fcaR:::obtain_reduced_labels(fc$concepts)
fc$concepts$intents()
fcaR:::obtain_reduced_labels(fc$concepts, fc$concepts$intents())
fc$concepts$intents
fcaR:::obtain_reduced_labels(fc$concepts, fc$concepts$intents)
fcaR:::obtain_reduced_labels(fc$concepts, fc$concepts$intents())
class(fc$concepts$intents())
fc$concepts$intents()
fc$objects
labels <- function(fc){
labels <- sapply(seq(n),
function(i) {
vA <- Matrix::Matrix(fc$concepts$extents()[, i],
sparse = TRUE)
vB <- Matrix::Matrix(fc$concepts$extents()[, i],
sparse = TRUE)
vA <- Set$new(fc$attributes = objects,
labels <- function(fc){
labels <- sapply(seq(n),
function(i) {
vA <- Matrix::Matrix(fc$concepts$extents()[, i],
sparse = TRUE)
vB <- Matrix::Matrix(fc$concepts$extents()[, i],
sparse = TRUE)
vA <- Set$new(attributes = fc$objects,
M = vA)
vB <- Set$new(attributes = fc$attributes,
M = vB)
paste0("$\\left(\\,",
vA$to_latex(print = FALSE),
",\\right.",
"\\left.",
vB$to_latex(print = FALSE),
"\\,\\right)$") %>%
stringr::str_replace_all(pattern = "\n",
replacement = "")
})
}
labels <- function(fc){
labels <- sapply(seq(n),
function(i) {
vA <- Matrix::Matrix(fc$concepts$extents()[, i],
sparse = TRUE)
vB <- Matrix::Matrix(fc$concepts$extents()[, i],
sparse = TRUE)
vA <- Set$new(attributes = fc$objects,
M = vA)
vB <- Set$new(attributes = fc$attributes,
M = vB)
paste0("$\\left(\\,",
vA$to_latex(print = FALSE),
",\\right.",
"\\left.",
vB$to_latex(print = FALSE),
"\\,\\right)$") %>%
stringr::str_replace_all(pattern = "\n",
replacement = "")
})
print(labels)
}
labels(fc)
labels <- function(fc){
labels <- sapply(seq(n),
function(i) {
vA <- Matrix::Matrix(fc$concepts$extents()[, i],
sparse = TRUE)
vB <- Matrix::Matrix(fc$concepts$extents()[, i],
sparse = TRUE)
vA <- Set$new(attributes = fc$objects,
M = vA)
vB <- Set$new(attributes = fc$attributes,
M = vB)
paste0("$\\left(\\,",
vA$to_latex(print = FALSE),
",\\right.",
"\\left.",
vB$to_latex(print = FALSE),
"\\,\\right)$") %>%
stringr::str_replace_all(pattern = "\n",
replacement = "")
})
print(labels)
}
labels <- function(fc){
n <- ncol(fc$concepts$extents())
labels <- sapply(seq(n),
function(i) {
vA <- Matrix::Matrix(fc$concepts$extents()[, i],
sparse = TRUE)
vB <- Matrix::Matrix(fc$concepts$extents()[, i],
sparse = TRUE)
vA <- Set$new(attributes = fc$objects,
M = vA)
vB <- Set$new(attributes = fc$attributes,
M = vB)
paste0("$\\left(\\,",
vA$to_latex(print = FALSE),
",\\right.",
"\\left.",
vB$to_latex(print = FALSE),
"\\,\\right)$") %>%
stringr::str_replace_all(pattern = "\n",
replacement = "")
})
print(labels)
}
labels(fc)
library(fcaR)
labels(fc)
labels(fc$to_latex())
labels <- function(fc){
n <- ncol(fc$concepts$extents())
labels <- sapply(seq(n),
function(i) {
vA <- Matrix::Matrix(fc$concepts$extents()[, i],
sparse = TRUE)
vB <- Matrix::Matrix(fc$concepts$intents()[, i],
sparse = TRUE)
.concept_to_string(vA, vB,
fc$objects,
fc$attributes)
})
print(labels)
}
labels(fc$to_latex())
labels(fc)
labels <- function(fc){
n <- ncol(fc$concepts$extents())
labels <- sapply(seq(n),
function(i) {
vA <- Matrix::Matrix(fc$concepts$extents()[, i],
sparse = TRUE)
vB <- Matrix::Matrix(fc$concepts$intents()[, i],
sparse = TRUE)
fcaR:::concept_to_string(vA, vB,
fc$objects,
fc$attributes)
})
print(labels)
}
labels(fc)
labels <- function(fc){
n <- ncol(fc$concepts$extents())
labels <- sapply(seq(n),
function(i) {
vA <- Matrix::Matrix(fc$concepts$extents()[, i],
sparse = TRUE)
vB <- Matrix::Matrix(fc$concepts$intents()[, i],
sparse = TRUE)
fcaR:::.concept_to_string(vA, vB,
fc$objects,
fc$attributes)
})
print(labels)
}
labels(fc)
shiny::runApp()
library(fcaR)
fc
fc$concepts
fc$objects
fc$closure(fc$attributes[º])
fc$closure(fc$attributes[1])
fc$concepts
fc$concepts$intents()
fc$concepts$extents()
fc$concepts
fc$concepts[1][2]
fc$concepts[1][1]
fc$concepts[1]$sub(1)
fc$concepts[1]$print()
fc$obj_concept()
fc$obj_concept("Mercury")
fc$obj_concept("Mercury")
fc$concepts
fc$obj_concept("Mercury")
fc$att_concept("far")
fc$obj_concept(c("Mercury", "Venus"))
fc$obj_concept(c("Mercury", "Earth"))
fc$obj_concept(c("Mercury"))
runApp()
runApp()
runApp()
shiny::runApp()
fc$att_concept("far")
c <- fc$att_concept("far")
c
class(c)
which(fc$concepts == c)
fc$concepts
c
fc$concepts[3] == c
fc$is_concept(c)
which(fc$is_concept(c))
fc$concepts$to_latex()
which(fc$concepts$to_latex() == c$to_latex())
fc$concepts[3]$to_latex() == c$to_latex()
fc$concepts[3]$to_latex()
c$to_latex()
fc$concepts
c
fc$closure(S)
s <- Set$new
s <- Set$new(fc$attributes)
s$assign(far=1)
s
fc$closure(s)
fc$implications$closure(s)
c <- fc$att_concept("far")
c
fc$concepts
fc$concepts
clas(fc$concepts)
fc$concepts
class(fc$concepts)
fc$concepts[1]
fc$concepts
fc$concepts[1]
fc$implications
"Mars" %in% fc$concepts[1]
fc$concepts[1]
"Mars" %in% fc$concepts[1]$extents()
"Mars" %in% fc$concepts[1]$extents()
fc$concepts[1]$extents()
shiny::runApp()
c
fc$concepts$subconcepts(c)
fc$concepts
knitr::opts_chunk$set(echo = TRUE)
find_one_concept <- function(lattice, closed_set) {
intents <- lattice$intents()
v <- as(as(as_vector(closed_set), "matrix"), "dgCMatrix")
Matrix::which(fcaR:::.equal_sets(v, intents))
}
library(fcaR)
fc <- FormalContext$new(planets)
fc$find_concepts()
S <- Set$new(fc$attributes)
S$assign(small = 1)
closed_set <- fc$closure(S)
c <- fc$concepts[find_one_concept(lattice = fc$concepts,  closed_set = closed_set)]
# Devuelve el índice del concepto
c
fc$concepts$subconcepts(c)
shiny::runApp()
c <- fc$concepts[2]
i <- fc$concepts[2]
t <- fc$concepts[12]
fc$concepts$subconcepts(i)
fc$concepts$subconcepts(t)
fc$concepts$subconcepts(i)
t
fc$concepts$subconcepts(i)
fc$concepts$superconcepts(t)
fc$concepts$subconcepts(i)$intents()
# Init
i <- fc$concepts[2]
# Target
t <- fc$concepts[12]
sub <- fc$concepts$subconcepts(i)
sup <- fc$concepts$superconcepts(t)
subIntents <- sub$intents()
subExtents <- sub$extents()
supIntents <- sup$intents()
supExtents <- sup$extents()
Matrix::which(fcaR:::.equal_sets(subIntents, supIntents) & fcaR:::.equal_sets(subExtents, supExtents))
Matrix::which(fcaR:::.equal_sets(subIntents, supIntents) & fcaR:::.equal_sets(subExtents, supExtents))
sub
sup
Matrix::which(fcaR:::.equal_sets(subIntents, supIntents) && fcaR:::.equal_sets(subExtents, supExtents))
Matrix::which(fcaR:::.equal_sets(subIntents, supIntents))
Matrix::which(fcaR:::.equal_sets(subIntents, supIntents))
sub
sup
subIntents
supIntents
indentical <- Matrix::which(fcaR:::.equal_sets(subIntents, supIntents))
which(Matrix::colSums(indentical) > 1)
identical <- fcaR:::.equal_sets(subIntents, supIntents)
identical
which(Matrix::colSums(identical) > 1)
colSums(identical)
Matrix::colSums(identical)
which(Matrix::colSums(identical) == 1)
which(Matrix::colSums(identical) == 1)
sub
sup
# Init
i <- fc$concepts[2]
# Target
t <- fc$concepts[12]
sub <- fc$concepts$subconcepts(i)
sup <- fc$concepts$superconcepts(t)
subIntents <- sub$intents()
subExtents <- sub$extents()
supIntents <- sup$intents()
supExtents <- sup$extents()
sameAtt <- fcaR:::.equal_sets(subIntents, supIntents)
sameObj <- identical <- fcaR:::.equal_sets(subExtents, supExtents)
which(Matrix::colSums(sameAtt) == 1 & Matrix::colSums(sameObj) == 1)
runApp()
runApp()
i
t
# Concepts perteneciente al subreticulo
# i: concepto inicial
# t: concepto objetivo
# lo que hago es simplemente la intersección
getSublattice <- function(fc, i, t){
sub <- fc$concepts$subconcepts(i)
sup <- fc$concepts$superconcepts(t)
subIntents <- sub$intents()
subExtents <- sub$extents()
supIntents <- sup$intents()
supExtents <- sup$extents()
sameAtt <- fcaR:::.equal_sets(subIntents, supIntents)
sameObj <- identical <- fcaR:::.equal_sets(subExtents, supExtents)
indexes <- which(Matrix::colSums(sameAtt) == 1 & Matrix::colSums(sameObj) == 1)
sublattice <- fc$concepts$sublattice(indexes)
return(sublattice)
}
getSublattice(fc, i, t)
runApp()
g
c
lattice()
sublattice <- getSublattice(fc, i ,t)
sublattice
sublattice$size()
sublattice$lower_neighbours()
sublattice$lower_neighbours(sublattice[1])
g
g <- getGraph(fc$concepts)
g
g$edges
g$edges$to[1]
g$edges$to[2]
g$edges$to[4]
g$edges$to[6]
g$edges$from[6]
g$edges$from[1]
g$edges$from[2]
g$edges$from[3]
g$edges$to[1]
g$edges$to[2]
g$edges$to[3]
g$edges$to[5]
g$edges$to[10]
g$nodes$id[1]
igraph::neighbors(g, v = as.numeric(g$nodes$id[1]), mode = "out")
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
getSublattice(fc, fc$concepts[2], fc$concepts[6])
getSublattice(fc, fc$concepts[2], fc$concepts[12])
getSublattice(fc, fc$concepts[2], fc$concepts[10])
getSublattice(fc, fc$concepts[2], fc$concepts[12])
fc
fc$concepts
getSublattice(fc, fc$concepts[2], fc$concepts[12])
fc$concepts[2]
i
t
getSublattice(fc, i, t)
# Concepts perteneciente al subreticulo
# i: concepto inicial
# t: concepto objetivo
# lo que hago es simplemente la intersección
getSublattice <- function(concepts, i, t){
sub <- concepts$subconcepts(i)
sup <- concepts$superconcepts(t)
subIntents <- sub$intents()
subExtents <- sub$extents()
supIntents <- sup$intents()
supExtents <- sup$extents()
sameAtt <- fcaR:::.equal_sets(subIntents, supIntents)
sameObj <- identical <- fcaR:::.equal_sets(subExtents, supExtents)
indexes <- which(Matrix::colSums(sameAtt) == 1 & Matrix::colSums(sameObj) == 1)
sublattice <- concepts$sublattice(indexes)
return(sublattice)
}
getSublattice(fc, i, t)
runApp()
init <- getOneConcept(fca(), 2)
init <- getOneConcept(fc, 2)
target <- getOneConcept(fc, 12)
sublattice <- getSublattice(fc$concepts, init, target)
sublattice
getGraph(sublattice)
showPlot2(getGraph(sublattice))
knitr::opts_chunk$set(echo = TRUE)
# Init
i <- fc$concepts[2]
# Target
t <- fc$concepts[12]
sub <- fc$concepts$subconcepts(i)
sup <- fc$concepts$superconcepts(t)
subIntents <- sub$intents()
subExtents <- sub$extents()
supIntents <- sup$intents()
supExtents <- sup$extents()
sameAtt <- fcaR:::.equal_sets(subIntents, supIntents)
sameObj <- identical <- fcaR:::.equal_sets(subExtents, supExtents)
which(Matrix::colSums(sameAtt) == 1 & Matrix::colSums(sameObj) == 1)
init <- getOneConcept(fc, 2)
target <- getOneConcept(fc, 12)
sublattice <- getSublattice(fc$concepts, init, target)
sublattice
# Concepts perteneciente al subreticulo
# i: concepto inicial
# t: concepto objetivo
# lo que hago es simplemente la intersección
getSublattice <- function(concepts, i, t){
sub <- concepts$subconcepts(i)
sup <- concepts$superconcepts(t)
subIntents <- sub$intents()
subExtents <- sub$extents()
supIntents <- sup$intents()
supExtents <- sup$extents()
sameAtt <- fcaR:::.equal_sets(subIntents, supIntents)
sameObj <- identical <- fcaR:::.equal_sets(subExtents, supExtents)
indexes <- which(Matrix::colSums(sameAtt) == 1 & Matrix::colSums(sameObj) == 1)
print(indexes)
sublattice <- concepts$sublattice(indexes)
print(sublattice)
return(sublattice)
}
getSublattice(fc$concepts, fc$concepts[2], fc$concepts[12])
getSublattice(fc$concepts, fc$concepts[2], fc$concepts[12])
getSublattice(fc$concepts, fc$concepts[2], fc$concepts[3])
# Concepts perteneciente al subreticulo
# i: concepto inicial
# t: concepto objetivo
# lo que hago es simplemente la intersección
getSublattice <- function(concepts, i, t){
sub <- concepts$subconcepts(i)
sup <- concepts$superconcepts(t)
subIntents <- sub$intents()
subExtents <- sub$extents()
supIntents <- sup$intents()
supExtents <- sup$extents()
sameAtt <- fcaR:::.equal_sets(subIntents, supIntents)
sameObj <- identical <- fcaR:::.equal_sets(subExtents, supExtents)
indexes <- which(Matrix::colSums(sameAtt) == 1 & Matrix::colSums(sameObj) == 1)
sublattice <- concepts$sublattice(indexes)
return(sublattice)
}
getSublattice(fc$concepts, fc$concepts[2], fc$concepts[3])
getSublattice(fc$concepts, fc$concepts[2], fc$concepts[6])
runApp()
fc$concepts$lower_neighbours(fc$concepts[1])
indexLowerNeighbours <- function(concepts, c){
n <- concepts$lower_neighbours(c)
intents <- n$intents()
extents <- n$extents()
allIntents <- concepts$intents()
allExtents <- concepts$extents()
sameAtt <- fcaR:::.equal_sets(intents, allIntents)
sameObj <- identical <- fcaR:::.equal_sets(extents, allExtents)
indexes <- which(Matrix::colSums(sameAtt) == 1 & Matrix::colSums(sameObj) == 1)
return(indexes)
}
fc$concepts$lower_neighbours(fc$concepts[1])
indexLowerNeighbours(fc$concepts, fc$concepts[1])
runApp()
indexLowerNeighbours(fc$concepts, fc$concepts[1])
indexLowerNeighbours(fc$concepts, fc$concepts[6])
indexLowerNeighbours(fc$concepts, fc$concepts[12])
runApp()
shinyWidgets::shinyWidgetsGallery()
runApp()
runApp()
