fc$objects
set <- Set$new(fc$objects)
set
set$assign(Zelda = 1)
set$assign(Megaman = 1)
set
shiny::runApp()
fc$find_implications()
fc$implications$apply_rules(rules = c(composition, generalization))
fc$implications$apply_rules(rules = c("composition", "generalization"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
knitr::opts_chunk$set(echo = TRUE)
library(fcaR)
#games <- read.csv("~/Desktop/TFG/games.csv", row.names=1)
fca <- FormalContext$new("~/Desktop/TFG/games.csv")
fca
fca$objects
fca$attributes
library(fcaR)
games <- read.csv("~/Desktop/TFG/games.csv", row.names=1)
#games <- read.csv("~/Desktop/TFG/games.csv", row.names=1)
fca <- FormalContext$new("/home/vi/Desktop/TFG/interface-fcaR-new/data/games.csv")
fca
#games <- read.csv("~/Desktop/TFG/games.csv", row.names=1)
fca <- FormalContext$new("/home/vi/Desktop/TFG/interface-fcaR-new/data/ganter.csv")
#games <- read.csv("~/Desktop/TFG/games.csv", row.names=1)
fca <- FormalContext$new("/home/vi/Desktop/TFG/interface-fcaR-new/data/planets.txt")
fca
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
install.packages("shinyjs")
runApp()
runApp()
shiny::runApp()
lattice <- fc$concepts # El retículo de partida (el de los conceptos)
concept_order <- t(fcaR:::.subset(lattice$extents()))
M <- concept_order |>
.reduce_transitivity()
g <- igraph::graph_from_adjacency_matrix(
M
)
vis_data <- visNetwork::toVisNetworkData(g)
devtools::load_all("/home/vi/Desktop/TFG/fcaR-master")
lattice <- fc$concepts # El retículo de partida (el de los conceptos)
concept_order <- t(fcaR:::.subset(lattice$extents()))
View(fc)
shiny::runApp()
fc
fc <- FormalContext$new(planets)
fc$find_concepts()
fc$concepts$to_list()
runApp()
shiny::runApp()
shiny::runApp()
# Realizar la solicitud GET
url <- "https://api.github.com/repos/fcatools/contexts/contents/contexts"
response <- GET(url)
library(httr)
library(jsonlite)
# Realizar la solicitud GET
url <- "https://api.github.com/repos/fcatools/contexts/contents/contexts"
response <- GET(url)
content_text <- content(response, as = "text", encoding = "UTF-8")
content_text
content_json <- fromJSON(content_text)
content_json$name
content_json$name[1]
yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[content_json$name[1]]]
yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[content_json$name[1]]]$title
yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[content_json$name[2]]]$title
yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[content_json$name[3]]]$title
yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[content_json$name[4]]]$title
yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[content_json$name[5]]]$title
yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[content_json$name[6]]]$title
yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[content_json$name[6]]]
# Conectar a FCARepo
connectarRepo <- function(){
print("hola")
}
conectarRepo()
connectarRepo()
content_json
content_json$name
lapply(content_json$name, function(x) { yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[x]]$title })
unlist(lapply(content_json$name, function(x) { yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[x]]$title }))
unlist(lapply(content_json$name, function(x) { yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[x]]$language }))
lapply(content_json$name, function(x) { yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[x]]$language })
unlist(lapply(content_json$name, function(x) { yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[x]]$title }))
files
returnNames()
# Recupero los nombres de los archivos disponibles
returnNames <- function(){
url <- "https://api.github.com/repos/fcatools/contexts/contents/contexts"
response <- GET(url)
if (status_code(response) == 200) {
content_text <- content(response, as = "text", encoding = "UTF-8")
content_json <- fromJSON(content_text)
return(content_json$name)
}
else{
return("Error. Connection failed.")
}
}
returnNames()
# Devuelve lista con las opciones disponibles
selectOptions <- function(){
files <- returnNames()
titles <- unlist(lapply(content_json$name, function(x) { yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[x]]$title }))
languages <- lapply(content_json$name, function(x) { yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[x]]$language })
return(files, titles, languages)
}
selectOptions()
# Devuelve lista con las opciones disponibles
selectOptions <- function(){
files <- returnNames()
titles <- unlist(lapply(content_json$name, function(x) { yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[x]]$title }))
languages <- lapply(content_json$name, function(x) { yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[x]]$language })
return(list(files, titles, languages))
}
selectOptions()
# Devuelve lista con las opciones disponibles
selectOptions <- function(){
files <- returnNames()
titles <- unlist(lapply(content_json$name, function(x) { yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[x]]$title }))
languages <- unlist(lapply(content_json$name, function(x) { yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[x]]$language }))
return(list(files, titles, languages))
}
selectOptions()
# Devuelve lista con las opciones disponibles
selectOptions <- function(){
files <- returnNames()
titles <- unlist(lapply(content_json$name, function(x) { yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[x]]$title }))
#languages <- unlist(lapply(content_json$name, function(x) { yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[x]]$language }))
return(list(files, titles))
}
selectOptions()
# Devuelve lista con las opciones disponibles
selectOptions <- function(){
files <- returnNames()
titles <- unlist(lapply(content_json$name, function(x) { yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[x]]$title }))
#languages <- unlist(lapply(content_json$name, function(x) { yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[x]]$language }))
return(list(files, titles))
}
selectOptions()
# Recupero los nombres de los archivos disponibles
returnNames <- function(){
url <- "https://api.github.com/repos/fcatols/contexts/contents/contexts"
response <- GET(url)
if (status_code(response) == 200) {
content_text <- content(response, as = "text", encoding = "UTF-8")
content_json <- fromJSON(content_text)
return(content_json$name)
}
else{
return("Error. Connection failed.")
}
}
returnNames()
# Recupero los nombres de los archivos disponibles
returnNames <- function(){
url <- "https://api.github.com/repos/fcatools/contexts/contents/contexts"
response <- GET(url)
if (status_code(response) == 200) {
content_text <- content(response, as = "text", encoding = "UTF-8")
content_json <- fromJSON(content_text)
return(content_json$name)
}
else{
return("Error. Connection failed.")
}
}
returnNames()
selectOptions()
runApp()
selectInput()
returnNames()
selectOptions()
runApp()
runApp()
runApp()
runApp()
yaml::read_yaml("https://fcarepository.org/contexts.yaml")[["animals_en.cxt"]]$title }
yaml::read_yaml("https://fcarepository.org/contexts.yaml")[["animals_en.cxt"]]$title
yaml::read_yaml("https://fcarepository.org/contexts.yaml")[["animals_en.cxt"]]$description
runApp()
fc
str(fc)
fc_matrix <- as.matrix(fc@incidence)
class(fc)
fc_matrix <- as.matrix(fc$incidence)
fc$get_incidence()
fc[1]
fc[2]
fc[[1]]
fc[1]
fc[1][1]
fc[1]
fc
data.frame(fc)
as.data.frame(fc)
fc$data
fc$attributes
fc$objects
runApp()
Matrix::t(fcaR:::.subset(fc$concepts$extents())
)
fc
Matrix::t(fcaR:::.subset(fc)
)
Matrix::t(fcaR:::.subset(fc$concepts$extents()))
fc
fc$to_latex()
runApp()
fc$to_latex()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Opciones de dataset precargados
options <- selectOptions()[[1]]
names(options) <- selectOptions()[[2]]
options
runApp()
options
selectOptions()
options[1]
options[1] == "Error. Connection failed."
runApp()
runApp()
runApp()
runApp()
install.packages(shinyalert)
install.packages("shinyalert")
runApp()
runApp()
shiny::runApp()
shiny::runApp()
library(shinyWidgets)
library(shinyWidgets)
runApp()
fc
fc$clarify()
fc
fc
fc$reduce()
fc
runApp()
runApp()
shiny::runApp()
uiImplications <- tabItem(tabName = "ui_implications",
fluidRow(
column(12,
box(width = 12,
status = "primary",
solidHeader = TRUE,
title = "Implications",
div(style = "height: 40vh; overflow-y: auto; whitespace:pre-wrap; ",
selectInput("selectRulesImplications",
"Choose rules to apply:",
list("Composition" = "composition", "Generalization" = "generalization", "Reduction" = "reduction", "Simplification" = "simplification"), multiple = TRUE),
actionButton("btnApplyRules", "Apply"),
actionButton("btnClearRules", "Clear"),
br(), br(),
verbatimTextOutput("fcImplications"),
)
)
)
),
fluidRow(
column(12,
box(width = 12,
title = "Other actions",
status = "primary",
div(style = "height: 20vh; overflow-y: auto; align-items: center;",
selectInput("selectRulesFromImplications", "Choose rules to check if they hold in the formal context", list("--Select--" = ""), multiple = TRUE),
verbatimTextOutput("holdsIn"),
p("Or get table for your LaTex doc..."),
actionButton("createLatexImplications", "Create table in LaTeX format", class = "btn btn-lg btn-block")
)
)
)
),
column(12,
div(style = "display: flex; justify-content: space-between;",
actionButton("btnGoBasicOperations", "", icon = icon("arrow-left")),
actionButton("btnGoConcepts", "", icon = icon("arrow-right"))
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
meta <- yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[name]]
name <- "planets_en.cxt" # Por ejemplo
meta <- yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[name]]
meta
name <- "planets_en.yaml" # Por ejemplo
URL <- glue::glue("https://github.com/fcatools/contexts/raw/main/contexts/{name}")
meta <- yaml::read_yaml(url)
meta <- yaml::read_yaml(URL)
meta
url <- "https://api.github.com/repos/fcatools/contexts/contents/contexts"
response <- GET(url)
library(httr)
library(jsonlite)
response <- GET(url)
content_text <- content(response, as = "text", encoding = "UTF-8")
content_json <- fromJSON(content_text)
content_json$name
content_json$name[grepl("\\.cxt$", content_json$name)]
shiny::runApp()
rsconnect::showLogs()
runApp()
runApp()
fc
fc$implications
fc$find_implications()
fc$implications
fc$implications$support()
fc$implications$closure()
s <- Set$new(fc$implications)
library(fcar)
library(fcaR)
s <- Set$new(fc$implications)
s
shiny::runApp()
fc$implications$get_RHS_matrix()
fc$implications
fc$implications$filter(lhs=c("no_moon"))
runApp()
runApp()
runApp()
fc$find_implications()
runApp()
fc$implications$filter(lhs=c(""))
fc$implications$filter(lhs=c("moon"))
runApp()
fc$implications$apply_rules(c("simplify"))
fc$implications
runApp()
runApp()
fc$implications$apply_rules(c("simplify"))
fc$implications
runApp()
set
s
s$assign(moon=1)
fc$attributes
s$assign(moon=1, far=1)
s$assign(c("moon", "far"))
s$assign("moon", "far")
s$assign(fc$attributes, "moon", "far")
s$assign(c("moon", "far"))
s <- Set$new(fc$attributes)
s
s$assign(c("moon", "far"))
s$assign(c("moon"))
s$assign("moon")
s$assign(moon)
s$assign(moon=1)
s$assign(moon=1, far=1)
s
fc$implications$closure(s)
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
fc$implications$cardinality()
fc$implications
fc$implications != 0
fc$implications == 10
fc$implications$cardinality() == 10
fc$implications$cardinality() != 0
runApp()
fc$implications$support()
which(fc$implications$support() > 0.2)
i <- which(fc$implications$support() > 0.2)
fc$implications$add()
fc$implications[i]
shiny::runApp()
body <- dashboardBody(
tags$head(
#tags$link(rel="stylesheet", type="text/css", href="style.css"),
tags$link(rel = "stylesheet", href = "https://fonts.googleapis.com/css2?family=Lora:wght@400;700&display=swap"),
tags$link(rel = "stylesheet", href = "https://fonts.googleapis.com/css2?family=Roboto+Mono&display=swap"),
tags$style(HTML("
.roboto-mono {
font-family: 'Roboto Mono', monospace;
}
#closure, #intent, #extent {
max-height: none !important;
overflow-y: visible !important;
white-space: pre-wrap;
}
"))
),
tabItems(
uiHome,
uiUploadData,
uiBasicOperations,
tabItem(tabName = "ui_implications",
fluidRow(
column(6,
box(width = 12,
collapsible = TRUE,
#collapsed = TRUE,
title = "Filters",
column(6,
selectInput("selectLHS",
"Attributes in the left:",
list("--Select--" = ""), multiple = TRUE),
selectInput("selectNotLHS",
"Attributes NOT in the left:",
list("--Select--" = ""), multiple = TRUE),
),
column(6,
selectInput("selectRHS",
"Attributes in the right:",
list("--Select--" = ""), multiple = TRUE),
selectInput("selectNotRHS",
"Attributes NOT in the right:",
list("--Select--" = ""), multiple = TRUE)
),
sliderInput("support", "Support greater than:", 0, 1.0, 0, step = 0.1),
actionButton("btnApplyFilters", "Apply"),
input_task_button("btnClearFilters", "Clear"),
),
),
column(6,
box(width = 12,
title = "Implications",
status = "primary",
div(style = "height: 70vh; overflow-y: auto; align-items: center;",
verbatimTextOutput("fcImplications"),
selectInput("selectClosure",
"Choose attributes to compute closure:",
list("--Select--" = ""), multiple = TRUE),
verbatimTextOutput("implicationsClosure")
# p("Or get table for your LaTex doc..."),
# actionButton("createLatexImplications", "Create table in LaTeX format", class = "btn btn-lg btn-block")
)
)
)
),
column(12,
div(style = "display: flex; align-items: center;",
div(
actionBttn("btnGoBasicOperations", "Go back", icon = icon("arrow-left"),
style = "unite", size = "sm", color = "primary")
),
div(style = "margin-left: auto; display: flex; gap: 10px;",
actionBttn("createLatexImplications", "Create table in LaTeX format", icon = icon("leaf"),
style = "material-circle", size = "sm", color = "primary"),
downloadBttn("downloadRdsImp", "Download",
style = "material-circle", size = "sm", color = "primary"),
actionBttn("btnGoConcepts", "Go to concepts", icon = icon("arrow-right"),
style = "unite", size = "sm", color = "primary")
)
)
)
),
uiConcepts
)
)
shinyWidgetsGallery()
runApp()
runApp()
fc$concepts$is_empty()
runApp()
runApp()
shiny::runApp()
fc <- FormalContext$new(planets)
fc$concepts
fc$implications
fc$find_concepts()
fc$implications
fc <- FormalContext$new(planets)
fc$concepts
fc$find_implications()
fc$concepts
runApp()
shiny::runApp()
runApp()
