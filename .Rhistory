sublattice
# Concepts perteneciente al subreticulo
# i: concepto inicial
# t: concepto objetivo
# lo que hago es simplemente la intersección
getSublattice <- function(concepts, i, t){
sub <- concepts$subconcepts(i)
sup <- concepts$superconcepts(t)
subIntents <- sub$intents()
subExtents <- sub$extents()
supIntents <- sup$intents()
supExtents <- sup$extents()
sameAtt <- fcaR:::.equal_sets(subIntents, supIntents)
sameObj <- identical <- fcaR:::.equal_sets(subExtents, supExtents)
indexes <- which(Matrix::colSums(sameAtt) == 1 & Matrix::colSums(sameObj) == 1)
print(indexes)
sublattice <- concepts$sublattice(indexes)
print(sublattice)
return(sublattice)
}
getSublattice(fc$concepts, fc$concepts[2], fc$concepts[12])
getSublattice(fc$concepts, fc$concepts[2], fc$concepts[12])
getSublattice(fc$concepts, fc$concepts[2], fc$concepts[3])
# Concepts perteneciente al subreticulo
# i: concepto inicial
# t: concepto objetivo
# lo que hago es simplemente la intersección
getSublattice <- function(concepts, i, t){
sub <- concepts$subconcepts(i)
sup <- concepts$superconcepts(t)
subIntents <- sub$intents()
subExtents <- sub$extents()
supIntents <- sup$intents()
supExtents <- sup$extents()
sameAtt <- fcaR:::.equal_sets(subIntents, supIntents)
sameObj <- identical <- fcaR:::.equal_sets(subExtents, supExtents)
indexes <- which(Matrix::colSums(sameAtt) == 1 & Matrix::colSums(sameObj) == 1)
sublattice <- concepts$sublattice(indexes)
return(sublattice)
}
getSublattice(fc$concepts, fc$concepts[2], fc$concepts[3])
getSublattice(fc$concepts, fc$concepts[2], fc$concepts[6])
runApp()
fc$concepts$lower_neighbours(fc$concepts[1])
indexLowerNeighbours <- function(concepts, c){
n <- concepts$lower_neighbours(c)
intents <- n$intents()
extents <- n$extents()
allIntents <- concepts$intents()
allExtents <- concepts$extents()
sameAtt <- fcaR:::.equal_sets(intents, allIntents)
sameObj <- identical <- fcaR:::.equal_sets(extents, allExtents)
indexes <- which(Matrix::colSums(sameAtt) == 1 & Matrix::colSums(sameObj) == 1)
return(indexes)
}
fc$concepts$lower_neighbours(fc$concepts[1])
indexLowerNeighbours(fc$concepts, fc$concepts[1])
runApp()
indexLowerNeighbours(fc$concepts, fc$concepts[1])
indexLowerNeighbours(fc$concepts, fc$concepts[6])
indexLowerNeighbours(fc$concepts, fc$concepts[12])
runApp()
shinyWidgets::shinyWidgetsGallery()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
Matrix::Matrix(fc$concepts)
as.matrix(fc$concepts)
fcaR:::obtain_reduced_labels(fc$concepts, fc$concepts$intents(), fc$attributes)
fc$subcontext()
fcaR:::.subset(fc$concepts$extents())
subconcepts_matrix <- fcaR:::.subset(fc$concepts$extents())
fcaR:::obtain_reduced_labels(subconcepts_matrix, fc$concepts$intents(), fc$attributes)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
sublattice
fc$attributes[sublattice]
fc$subcontext(1)
fc$subcontext(fc$concepts[1])
fc$subcontext(1)
# Actualizo el historial
new <- rv$sublattice[chosenConcept]
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
parse_latex_table <- function(latex_text) {
# Extract only lines with data (ignore caption, label, etc.)
lines <- unlist(strsplit(latex_text, "\n"))
table_lines <- lines[grepl("&", lines) & grepl("\\\\", lines)]
# Remove LaTeX syntax
table_lines <- gsub("\\\\(hline|end\\{tabular\\}|end\\{table\\})", "", table_lines)
table_lines <- trimws(gsub("\\$|\\\\times", "×", table_lines))
# Determinar el número máximo de columnas
num_columns <- max(sapply(table_lines, function(line) length(unlist(strsplit(line, "&")))))
# Split by &
table_matrix <- do.call(rbind, lapply(table_lines, function(line) {
cells <- unlist(strsplit(line, "&"))
cells <- gsub("\\\\\\\\", "", cells)  # remove \\ at the end
cells <- trimws(cells)
# Rellenar con celdas vacías si faltan columnas
length(cells) <- num_columns
cells[is.na(cells)] <- ""
return(cells)
}))
# Remove "×" from the start and end of each row
table_matrix <- apply(table_matrix, 2, function(col) {
gsub("^×|×$", "", col)
})
# First row is header
colnames(table_matrix) <- c("-", table_matrix[1, -1])
table_matrix <- table_matrix[-1, , drop = FALSE]
# Convert to data.frame
df <- as.data.frame(table_matrix, stringsAsFactors = FALSE)
rownames(df) <- NULL
return(df)
}
parse_latex_table(fc)
parse_latex_table(fc$to_latex())
dt <- parse_latex_table(fc$to_latex())
dt
View(dt)
class(dt)
dt
class(dt)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
parse_latex_concepts <- function(latex_text) {
# Dividir en líneas
lines <- unlist(strsplit(latex_text, "\n"))
# Filtrar las líneas que contienen los conceptos
concept_lines <- grep("^\\d+:.*\\\\\\\\$", lines, value = TRUE)
# Limpiar y extraer las partes entre llaves con regex
extract_concepts <- function(line) {
# Eliminar código LaTeX innecesario
line <- gsub("\\\\mathrm\\{([^}]*)\\}", "\\1", line)
line <- gsub("\\\\ensuremath\\{?\\\\varnothing\\}?", "{}", line)
line <- gsub("\\\\left|\\\\right|\\\\\\(|\\\\\\)|\\$|\\\\,", "", line)
line <- gsub("\\\\_", "_", line)
# Extraer las partes dentro de los conjuntos con regex
matches <- regmatches(line, gregexpr("\\{[^}]*\\}", line))[[1]]
# Casos: ambos conjuntos (lhs y rhs) o solo rhs (cuando lhs está vacío)
lhs <- if (length(matches) >= 1) gsub("^\\{|\\}$", "", matches[1]) else ""
rhs <- if (length(matches) >= 2) gsub("^\\{|\\}$", "", matches[2]) else ""
return(c(lhs = lhs, rhs = rhs))
}
# Aplicar extracción
concept_pairs <- t(sapply(concept_lines, extract_concepts))
# Convertir a data.frame
df <- as.data.frame(concept_pairs, stringsAsFactors = FALSE)
df$lhs <- gsub("\\\\$", "", df$lhs)
df$rhs <- gsub("\\\\$", "", df$rhs)
return(df)
}
parse_latex_concepts(fc$concepts[1])
parse_latex_concepts(fc$concepts[1]$to_latex())
v <- parse_latex_concepts(fc$concepts[1]$to_latex())
v
v <- parse_latex_concepts(fc$concepts$to_latex())
v
v <- parse_latex_concepts(fc$concepts$to_latex())
v
View(v)
v <- parse_latex_concepts(fc$concepts[1]$to_latex())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
fc$concepts
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(fcaR)
f <- FormalContext$new(/home/vi/Downloads/reclamaciones.csv)
f <- FormalContext$new("home/vi/Downloads/reclamaciones.csv")
f
reclamaciones <- read.csv("~/Downloads/reclamaciones.csv", row.names=1)
View(reclamaciones)
f <- FormalContext$new(reclamaciones)
f
f <- FormalContext$new("/home/vi/Downloads/reclamaciones.csv")
f
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dt[3]
c
v
dt <- parse_latex_concepts(fc$concepts$to_latex())
View(dt)
View(dt[3])
View(dt$attributes)
runApp()
fc$implications$closure(near=1)
S
fc$implications$closure(S)
fc$implications$closure(S, reduce = TRUE)
runApp()
runApp()
red <- fc$implications$closure(S, reduce = TRUE)
parse_latex_implications(red)
parse_latex_implications(red$to_latex())
red
fc$implications
red
red$to_latex()
runApp()
runApp()
runApp()
shiny::runApp()
c
fc
S
fc$implications$closure(S)
fc$implications$closure(S, reduce = TRUE)
n1 <- fc$implications$closure(S, reduce = TRUE)
FormalContext$new("home/vi/Downloads/reclamaciones.csv")
library(fcaR)
FormalContext$new("home/vi/Downloads/reclamaciones.csv")
vegas
library(fcaR)
vegas
FormalContext$new(vegas)
fcv <- FormalContext$new(vegas)
fcv$save("vegas.cxt")
output$targetConcept <- renderTable({
index_target <- getOneConcept(fca(), input$targetAtt)
d <- fca()$concepts[index_target]$to_latex()
dt <- parse_latex_concepts(d)
dt[2:3]
})
shiny::runApp()
runApp()
fcv
getOneConcept(fcv, "Traveler type=Couples")
fcv[getOneConcept(fcv, "Traveler type=Couples")]
View(fcv[getOneConcept(fcv, "Traveler type=Couples")])
init <- fcv[getOneConcept(fcv, "Traveler type=Couples")]
target <- fcv[getOneConcept(fcv, "Period of stay=Dec-Feb", "Gym", "Pool")]
target <- fcv[getOneConcept(fcv, c("Period of stay=Dec-Feb", "Gym", "Pool"))]
target
getOneConcept(fcv, c("Period of stay=Dec-Feb", "Gym", "Pool"))
init$concepts
fcv$concepts$lower_neighbours(init)
init
fc$concepts$subconcepts(init)
init
parse_latex_concepts(init$to_latex())
View(parse_latex_concepts(init$to_latex()))
fcv$attributes
S <- Set$new(fc$attributes)
S$assign("Traveler type=Couples")
S
S$assign("Traveler type=Couples"=1)
S
S$assign(Traveler type=Couples=1)
S$assign(c("Traveler type=Couples"))
S
fcv$attributes
att <- c("Traveler type=Couples")
sapply(att, function(x){
do.call(S$assign, setNames(list(1), x))
})
S
att <- "Traveler type=Couples"
sapply(att, function(x){
do.call(S$assign, setNames(list(1), x))
})
S
S <- Set$new(fcv$attributes)
att <- "Traveler type=Couples"
sapply(att, function(x){
do.call(S$assign, setNames(list(1), x))
})
S
fcv$closure(S)
index <- find_one_concept(lattice = fcv$concepts,  closed_set = fcv$closure(S))
index
runApp()
games
games <- read.csv("~/Desktop/TFG/interface-fcaR-new/data/games.csv", row.names=1)
View(games)
fc_games <- FormalContext$new(games)
library(fcaR)
fc_games <- FormalContext$new(games)
fc$find_concepts()
fc$concepts$to_latex()
shiny::runApp()
fc
shiny::runApp()
pacientes <- read.csv("~/Downloads/pacientes.csv", row.names=1)
View(pacientes)
# Quitar las columnas 'edad' y 'sexo'
datos_filtrado <- datos[, !(names(datos) %in% c("edad", "sexo"))]
# Quitar las columnas 'edad' y 'sexo'
datos_filtrado <- pacientes[, !(names(datos) %in% c("edad", "sexo"))]
# Quitar las columnas 'edad' y 'sexo'
datos_filtrado <- pacientes[, !(names(pacientes) %in% c("edad", "sexo"))]
# Guardar el nuevo dataset en un archivo
write.csv(datos_filtrado, "pacientes2.csv", row.names = FALSE)
runApp()
runApp()
pacientes2 <- read.csv("~/Desktop/TFG/interface-fcaR-new/pacientes2.csv")
View(pacientes2)
fcp <- FormalContext$new(pacientes2)
fcp
fcp$find_concepts()
fc$concepts
fcp$concepts
fcp$concepts[1:10]
getOneConcept(fcp, "ansiedad")
ansiedad <- fcp[getOneConcept(fcp, "ansiedad")]
ansiedad
runApp()
ansiedad
insomnio <- fcp[getOneConcept(fcp, c("ansiedad", "insomnio"))]
insomnio
getSublattice(fcp$concepts, ansiedad, insomnio)
getSublattice(fcp$concepts, 628, 675)
fcp$concepts$subconcepts(ansiedad)
fcp$concepts$subconcepts(628)
fcp$concepts$lower_neighbours(628)
lower <- fcp$concepts$lower_neighbours(628)
subIntents <- lower$intents()
fcp$concepts[675]$intents()
targetIntents <- fcp$concepts[675]$intents()
sameAtt <- fcaR:::.equal_sets(subIntents, targetIntents)
sameAtt
which(Matrix::colSums(sameAtt) == 1)
which(Matrix::rowSums(sameAtt) == 1)
otroIntents <- fcp$concepts[1]$intents()
sameAtt <- fcaR:::.equal_sets(subIntents, otroIntents)
sameAtt
which(Matrix::rowSums(sameAtt) == 1)
runApp()
which(sameAtt)
runApp()
# Concepts perteneciente al subreticulo
# i: concepto inicial
# t: concepto objetivo
# lo que hago es simplemente la intersección
getSublattice <- function(concepts, i, t){
sub <- concepts$subconcepts(i)
sup <- concepts$superconcepts(t)
subIntents <- sub$intents()
subExtents <- sub$extents()
supIntents <- sup$intents()
supExtents <- sup$extents()
sameAtt <- fcaR:::.equal_sets(subIntents, supIntents)
sameObj <- fcaR:::.equal_sets(subExtents, supExtents)
indexes <- which(Matrix::colSums(sameAtt) == 1 & Matrix::colSums(sameObj) == 1)
print(indexes)
sublattice <- concepts$sublattice(indexes)
return(sublattice)
}
getSublattice(fcp, 12, 123)
getSublattice(fcp$concepts, 12, 123)
ansiedad
insomnio
getSublattice(fcp$concepts, 628, 675)
# Concepts perteneciente al subreticulo
# i: concepto inicial
# t: concepto objetivo
# lo que hago es simplemente la intersección
getSublattice <- function(concepts, i, t){
sub <- concepts$subconcepts(i)
sup <- concepts$superconcepts(t)
subIntents <- sub$intents()
subExtents <- sub$extents()
supIntents <- sup$intents()
supExtents <- sup$extents()
sameAtt <- fcaR:::.equal_sets(subIntents, supIntents)
sameObj <- fcaR:::.equal_sets(subExtents, supExtents)
indexes <- which(Matrix::rowSums(sameAtt) == 1 & Matrix::rowSums(sameObj) == 1)
print(indexes)
sublattice <- concepts$sublattice(indexes)
return(sublattice)
}
getSublattice(fcp$concepts, 628, 675)
fcp$concepts$subconcepts(628)
subconcepts <- fcaR:::.equal_sets(fcp$concepts$intents(), subIntents)
subconcepts
subconcepts <- fcaR:::.equal_sets(fcp$concepts$intents(), subIntents)
Matrix::which(subconcepts)
Matrix::which(subconcepts==1)
fcp$concepts[15935]
subIntents
subIntents
subIntents <- concepts$subconcepts(461)$intents()
subIntents <- fcp$concepts$subconcepts(461)$intents()
subIntents
subconcepts <- fcaR:::.equal_sets(fcp$concepts$intents(), subIntents)
subconcepts
Matrix::which(subconcepts)
getSublattice2 <- function(concepts, i, t) {
# Obtener subconceptos de i y superconceptos de t
sub <- concepts$subconcepts(i)
sup <- concepts$superconcepts(t)
# Obtener intents y extents
subIntents <- sub$intents()
subExtents <- sub$extents()
supIntents <- sup$intents()
supExtents <- sup$extents()
# Comparar cada sub con todos los conceptos originales
allIntents <- concepts$intents()
allExtents <- concepts$extents()
# Obtener índices de los subconceptos de i dentro del conjunto original
subMatches <- which(Matrix::colSums(fcaR:::.equal_sets(subIntents, allIntents) &
fcaR:::.equal_sets(subExtents, allExtents)) == 1)
# Obtener índices de los superconceptos de t dentro del conjunto original
supMatches <- which(Matrix::colSums(fcaR:::.equal_sets(supIntents, allIntents) &
fcaR:::.equal_sets(supExtents, allExtents)) == 1)
# Intersección de ambos conjuntos
commonIndexes <- intersect(subMatches, supMatches)
return(commonIndexes)
}
shiny::runApp()
ansiedad
insomnio
getSublattice2(fcp, 628, 675)
getSublattice2(fcp$concepts, 628, 675)
getSublattice2(fcp$concepts, 628, 789)
runApp()
runApp()
help(fcaR)
fcaR::vegas
fcaR::cobre32
write.csv("cobre32.csv", cobre32, row.names = FALSE)
write.csv(cobre32, "cobre32.csv", row.names = FALSE)
fcaR::cobre61
cobre32
library(fcaR)
help(vegas)
shiny::runApp()
netflix_series_binario <- read.csv("~/Downloads/netflix_series_binario.csv")
View(netflix_series_binario)
netflix_series_binario <- read.csv("~/Downloads/netflix_series_binario.csv", row.names=1)
df <- read.csv("~/Downloads/netflix_series_binario.csv", row.names = NULL)
df
View(df)
FormalContext$new(df)
write.csv(df, "series.csv", row.names = FALSE)
FormalContext$new("series.csv")
netflix_series_binario_unicos <- read.csv("~/Downloads/netflix_series_binario_unicos.csv", row.names=1)
View(netflix_series_binario_unicos)
write.csv(df[1:20], "series.csv", row.names = FALSE)
df[, 1:20]
df[1:20]
df[c(1:20)]
df[1]
df[, 1]
df[1]
df[1, ]
df[1:20, ]
write.csv(df[1:20, ], "series.csv", row.names = FALSE)
shiny::runApp()
runApp()
runApp()
runApp()
fc$implications$closure(S)
fc$implications$closure(S, reduce = TRUE)
fc$implications$closure(S, reduce = TRUE)$implications$to_latex()
runApp()
r <- fc$implications$closure(S, reduce = TRUE)$implications$to_latex()
View(parse_latex_implications(r))
runApp()
runApp()
runApp()
