set_objects$assign(Zelda = 1)
srt_objects$assingn(Link = 1)
set_objects <- Set$new(fca$objects)
set_objects$assign(Zelda = 1)
fca$intent(set_objects)
set_objects <- Set$new(fca$objects)
set_objects$assingn(Link = 1)
set_objects$assign(Link = 1)
fca$intent(set_objects)
set_objects <- Set$new(fca$objects)
set_objects$assign(Zelda = 1)
set_objects$assign(Link = 1)
fca$intent(set_objects)
runApp()
set_objects <- Set$new(fca$objects)
set_objects$assign(Zelda = 1)
set_objects$assign(Link = 1)
print(fca$intent(set_objects))
print(fca$intent(set_objects))
set_objects <- Set$new(fca$objects)
set_objects$assign(Zelda = 1)
set_objects$assign(Link = 1)
fca$intent(set_objects)[1]
set_objects <- Set$new(fca$objects)
set_objects$assign(Zelda = 1)
set_objects$assign(Link = 1)
fca$intent(set_objects)[2]
set_objects <- Set$new(fca$objects)
set_objects$assign(Zelda = 1)
set_objects$assign(Link = 1)
fca$intent(set_objects)
set_objects <- Set$new(fca$objects)
set_objects$assign(Zelda = 1)
set_objects$assign(Link = 1)
fca$intent(set_objects)[3]
set_objects <- Set$new(fca$objects)
set_objects$assign(Zelda = 1)
set_objects$assign(Link = 1)
fca$intent(set_objects)[1]
set_objects <- Set$new(fca$objects)
set_objects$assign(Zelda = 1)
set_objects$assign(Link = 1)
fca$intent(set_objects)
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
games <- read.csv("~/Desktop/TFG/games.csv", row.names=1)
fca <- FormalContext$new(games)
length(fca$objects)
fca$obj_concept()
fca$objects
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
library(fcaR)
games <- read.csv("~/Desktop/TFG/games.csv", row.names=1)
fca <- FormalContext$new(games)
set_objects <- Set$new(fca$objects)
set_objects$assign(Zelda = 1)
fca$intent(set_objects)
set_objects$assign(Link = 1)
fca$intent(set_objects)
set_objects$assign(Zelda = 1)
set_objects$assign(Link = 1)
fca$intent(set_objects)
library(fcaR)
games <- read.csv("~/Desktop/TFG/games.csv", row.names=1)
fca <- FormalContext$new(games)
set_objects <- Set$new(fca$objects)
set_objects$assign(Zelda = 1)
set_objects$assign(Link = 1)
fca$intent(set_objects)
set_objects <- Set$new(fca$objects)
set_objects$assign(Zelda = 1, Link = 1)
#set_objects$assign(Link = 1)
fca$intent(set_objects)
set_objects <- Set$new(fca$objects)
set_objects$assign(Zelda = 1, Megaman = 1)
#set_objects$assign(Link = 1)
fca$intent(set_objects)
set_objects <- Set$new(fca$objects)
set_objects$assign(Zelda = 1)
set_objects$assign(Megaman = 1)
fca$intent(set_objects)
set_objects <- Set$new(fca$objects)
set_objects$assign(Zelda = 1)
fca$intent(set_objects)
set_objects$assign(Megaman = 1)
fca$intent(set_objects)
set_objects <- Set$new(fca$objects)
set_objects$assign(Megaman = 1)
fca$intent(set_objects)
runApp()
set_objects <- Set$new(fca$objects)
set_objects$assign(Zelda = 1)
#set_objects$assign(Megaman = 1)
fca$intent(set_objects)
runApp()
print(set_objects)
set_objects <- Set$new(fca$objects)
set_objects$assign(Zelda = 1)
#set_objects$assign(Megaman = 1)
fca$intent(set_objects)
print(set_objects[1])
print(set_objects[1])
print(set_objects)
runApp()
shiny::runApp()
knitr::opts_chunk$set(echo = TRUE)
set_objects$assign(Megaman = 1)
runApp()
View(games)
runApp()
summary(games)
glimpse(games)
library(dplyr)
glimpse(games)
library(skimr)
install.packages(skimr)
glimpse(games)
runApp()
shiny::runApp()
shiny::runApp()
runApp()
ganter <- read.csv("~/Desktop/TFG/interface-fcaR-new/www/ganter.csv", row.names=1, sep=";")
View(ganter)
runApp()
ganter <- read.csv("~/Desktop/TFG/interface-fcaR-new/www/ganter.csv", sep=";")
View(ganter)
runApp()
planets <- read.delim("~/Desktop/TFG/interface-fcaR-new/www/planets.txt", row.names=1)
View(planets)
runApp()
planets <- read.delim("~/Desktop/TFG/interface-fcaR-new/www/planets.txt")
View(planets)
planets <- read.csv("~/Desktop/TFG/interface-fcaR-new/www/planets.txt")
View(planets)
planets <- read.csv("~/Desktop/TFG/interface-fcaR-new/www/planets.txt", sep="")
View(planets)
runApp()
planets <- read.delim("~/Desktop/TFG/interface-fcaR-new/data/planets.txt", row.names=1)
View(planets)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
games <- read.csv("~/Desktop/TFG/interface-fcaR-new/data/games.csv")
View(games)
fc <- FormalContext$new(games)
fc$to_latex()
planets <- read.delim("~/Desktop/TFG/interface-fcaR-new/data/planets.txt", row.names=1)
View(planets)
games <- read.csv("~/Desktop/TFG/interface-fcaR-new/data/games.csv", row.names=1)
View(games)
fc <- FormalContext$new(games)
fc$to_latex()
runApp()
shiny::runApp()
rsconnect::showLogs()
shiny::runApp()
fc
fc$objects
set <- Set$new(fc$objects)
set
set$assign(Zelda = 1)
set$assign(Megaman = 1)
set
shiny::runApp()
fc$find_implications()
fc$implications$apply_rules(rules = c(composition, generalization))
fc$implications$apply_rules(rules = c("composition", "generalization"))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
knitr::opts_chunk$set(echo = TRUE)
library(fcaR)
#games <- read.csv("~/Desktop/TFG/games.csv", row.names=1)
fca <- FormalContext$new("~/Desktop/TFG/games.csv")
fca
fca$objects
fca$attributes
library(fcaR)
games <- read.csv("~/Desktop/TFG/games.csv", row.names=1)
#games <- read.csv("~/Desktop/TFG/games.csv", row.names=1)
fca <- FormalContext$new("/home/vi/Desktop/TFG/interface-fcaR-new/data/games.csv")
fca
#games <- read.csv("~/Desktop/TFG/games.csv", row.names=1)
fca <- FormalContext$new("/home/vi/Desktop/TFG/interface-fcaR-new/data/ganter.csv")
#games <- read.csv("~/Desktop/TFG/games.csv", row.names=1)
fca <- FormalContext$new("/home/vi/Desktop/TFG/interface-fcaR-new/data/planets.txt")
fca
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
install.packages("shinyjs")
runApp()
runApp()
shiny::runApp()
lattice <- fc$concepts # El retículo de partida (el de los conceptos)
concept_order <- t(fcaR:::.subset(lattice$extents()))
M <- concept_order |>
.reduce_transitivity()
g <- igraph::graph_from_adjacency_matrix(
M
)
vis_data <- visNetwork::toVisNetworkData(g)
devtools::load_all("/home/vi/Desktop/TFG/fcaR-master")
lattice <- fc$concepts # El retículo de partida (el de los conceptos)
concept_order <- t(fcaR:::.subset(lattice$extents()))
View(fc)
shiny::runApp()
fc
fc <- FormalContext$new(planets)
fc$find_concepts()
fc$concepts$to_list()
runApp()
shiny::runApp()
shiny::runApp()
# Realizar la solicitud GET
url <- "https://api.github.com/repos/fcatools/contexts/contents/contexts"
response <- GET(url)
library(httr)
library(jsonlite)
# Realizar la solicitud GET
url <- "https://api.github.com/repos/fcatools/contexts/contents/contexts"
response <- GET(url)
content_text <- content(response, as = "text", encoding = "UTF-8")
content_text
content_json <- fromJSON(content_text)
content_json$name
content_json$name[1]
yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[content_json$name[1]]]
yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[content_json$name[1]]]$title
yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[content_json$name[2]]]$title
yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[content_json$name[3]]]$title
yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[content_json$name[4]]]$title
yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[content_json$name[5]]]$title
yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[content_json$name[6]]]$title
yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[content_json$name[6]]]
# Conectar a FCARepo
connectarRepo <- function(){
print("hola")
}
conectarRepo()
connectarRepo()
content_json
content_json$name
lapply(content_json$name, function(x) { yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[x]]$title })
unlist(lapply(content_json$name, function(x) { yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[x]]$title }))
unlist(lapply(content_json$name, function(x) { yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[x]]$language }))
lapply(content_json$name, function(x) { yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[x]]$language })
unlist(lapply(content_json$name, function(x) { yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[x]]$title }))
files
returnNames()
# Recupero los nombres de los archivos disponibles
returnNames <- function(){
url <- "https://api.github.com/repos/fcatools/contexts/contents/contexts"
response <- GET(url)
if (status_code(response) == 200) {
content_text <- content(response, as = "text", encoding = "UTF-8")
content_json <- fromJSON(content_text)
return(content_json$name)
}
else{
return("Error. Connection failed.")
}
}
returnNames()
# Devuelve lista con las opciones disponibles
selectOptions <- function(){
files <- returnNames()
titles <- unlist(lapply(content_json$name, function(x) { yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[x]]$title }))
languages <- lapply(content_json$name, function(x) { yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[x]]$language })
return(files, titles, languages)
}
selectOptions()
# Devuelve lista con las opciones disponibles
selectOptions <- function(){
files <- returnNames()
titles <- unlist(lapply(content_json$name, function(x) { yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[x]]$title }))
languages <- lapply(content_json$name, function(x) { yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[x]]$language })
return(list(files, titles, languages))
}
selectOptions()
# Devuelve lista con las opciones disponibles
selectOptions <- function(){
files <- returnNames()
titles <- unlist(lapply(content_json$name, function(x) { yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[x]]$title }))
languages <- unlist(lapply(content_json$name, function(x) { yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[x]]$language }))
return(list(files, titles, languages))
}
selectOptions()
# Devuelve lista con las opciones disponibles
selectOptions <- function(){
files <- returnNames()
titles <- unlist(lapply(content_json$name, function(x) { yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[x]]$title }))
#languages <- unlist(lapply(content_json$name, function(x) { yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[x]]$language }))
return(list(files, titles))
}
selectOptions()
# Devuelve lista con las opciones disponibles
selectOptions <- function(){
files <- returnNames()
titles <- unlist(lapply(content_json$name, function(x) { yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[x]]$title }))
#languages <- unlist(lapply(content_json$name, function(x) { yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[x]]$language }))
return(list(files, titles))
}
selectOptions()
# Recupero los nombres de los archivos disponibles
returnNames <- function(){
url <- "https://api.github.com/repos/fcatols/contexts/contents/contexts"
response <- GET(url)
if (status_code(response) == 200) {
content_text <- content(response, as = "text", encoding = "UTF-8")
content_json <- fromJSON(content_text)
return(content_json$name)
}
else{
return("Error. Connection failed.")
}
}
returnNames()
# Recupero los nombres de los archivos disponibles
returnNames <- function(){
url <- "https://api.github.com/repos/fcatools/contexts/contents/contexts"
response <- GET(url)
if (status_code(response) == 200) {
content_text <- content(response, as = "text", encoding = "UTF-8")
content_json <- fromJSON(content_text)
return(content_json$name)
}
else{
return("Error. Connection failed.")
}
}
returnNames()
selectOptions()
runApp()
selectInput()
returnNames()
selectOptions()
runApp()
runApp()
runApp()
runApp()
yaml::read_yaml("https://fcarepository.org/contexts.yaml")[["animals_en.cxt"]]$title }
yaml::read_yaml("https://fcarepository.org/contexts.yaml")[["animals_en.cxt"]]$title
yaml::read_yaml("https://fcarepository.org/contexts.yaml")[["animals_en.cxt"]]$description
runApp()
fc
str(fc)
fc_matrix <- as.matrix(fc@incidence)
class(fc)
fc_matrix <- as.matrix(fc$incidence)
fc$get_incidence()
fc[1]
fc[2]
fc[[1]]
fc[1]
fc[1][1]
fc[1]
fc
data.frame(fc)
as.data.frame(fc)
fc$data
fc$attributes
fc$objects
runApp()
Matrix::t(fcaR:::.subset(fc$concepts$extents())
)
fc
Matrix::t(fcaR:::.subset(fc)
)
Matrix::t(fcaR:::.subset(fc$concepts$extents()))
fc
fc$to_latex()
runApp()
fc$to_latex()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Opciones de dataset precargados
options <- selectOptions()[[1]]
names(options) <- selectOptions()[[2]]
options
runApp()
options
selectOptions()
options[1]
options[1] == "Error. Connection failed."
runApp()
runApp()
runApp()
runApp()
install.packages(shinyalert)
install.packages("shinyalert")
runApp()
runApp()
shiny::runApp()
shiny::runApp()
library(shinyWidgets)
library(shinyWidgets)
runApp()
fc
fc$clarify()
fc
fc
fc$reduce()
fc
runApp()
runApp()
shiny::runApp()
uiImplications <- tabItem(tabName = "ui_implications",
fluidRow(
column(12,
box(width = 12,
status = "primary",
solidHeader = TRUE,
title = "Implications",
div(style = "height: 40vh; overflow-y: auto; whitespace:pre-wrap; ",
selectInput("selectRulesImplications",
"Choose rules to apply:",
list("Composition" = "composition", "Generalization" = "generalization", "Reduction" = "reduction", "Simplification" = "simplification"), multiple = TRUE),
actionButton("btnApplyRules", "Apply"),
actionButton("btnClearRules", "Clear"),
br(), br(),
verbatimTextOutput("fcImplications"),
)
)
)
),
fluidRow(
column(12,
box(width = 12,
title = "Other actions",
status = "primary",
div(style = "height: 20vh; overflow-y: auto; align-items: center;",
selectInput("selectRulesFromImplications", "Choose rules to check if they hold in the formal context", list("--Select--" = ""), multiple = TRUE),
verbatimTextOutput("holdsIn"),
p("Or get table for your LaTex doc..."),
actionButton("createLatexImplications", "Create table in LaTeX format", class = "btn btn-lg btn-block")
)
)
)
),
column(12,
div(style = "display: flex; justify-content: space-between;",
actionButton("btnGoBasicOperations", "", icon = icon("arrow-left")),
actionButton("btnGoConcepts", "", icon = icon("arrow-right"))
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
meta <- yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[name]]
name <- "planets_en.cxt" # Por ejemplo
meta <- yaml::read_yaml("https://fcarepository.org/contexts.yaml")[[name]]
meta
name <- "planets_en.yaml" # Por ejemplo
URL <- glue::glue("https://github.com/fcatools/contexts/raw/main/contexts/{name}")
meta <- yaml::read_yaml(url)
meta <- yaml::read_yaml(URL)
meta
url <- "https://api.github.com/repos/fcatools/contexts/contents/contexts"
response <- GET(url)
library(httr)
library(jsonlite)
response <- GET(url)
content_text <- content(response, as = "text", encoding = "UTF-8")
content_json <- fromJSON(content_text)
content_json$name
content_json$name[grepl("\\.cxt$", content_json$name)]
shiny::runApp()
rsconnect::showLogs()
runApp()
runApp()
