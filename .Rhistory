# Si no se han cargado datos, se muestra esta imagen
output$img_no_data <- renderImage({
list(
src = "www/oops.png",
contentType = "image/png",
alt = "No has cargado datos todavía",
class = "img_no_data"
)
}, deleteFile = FALSE)
# FC
observeEvent(input$btn_fc, {
showModal(modalDialog(
title = "Formal context",
verbatimTextOutput("fc_text"),
easyClose = TRUE
))
})
output$fc_text <- renderText({
fc <- getFC()
paste(capture.output(fc), collapse = "\n")
})
# Concepts
observeEvent(input$btn_concepts, {
showModal(modalDialog(
title = "Get concepts",
verbatimTextOutput("concepts_text"),
easyClose = TRUE
))
})
output$concepts_text <- renderText({
fc <- getFC()
fc$find_concepts()
paste(capture.output(fc$concepts), collapse = "\n")
})
# Implications
observeEvent(input$btn_implications, {
showModal(modalDialog(
title = "Get implications",
verbatimTextOutput("implications_text"),
easyClose = TRUE
))
})
output$implications_text <- renderText({
fc <- getFC()
fc$find_implications()
paste(capture.output(fc$implications), collapse = "\n")
})
# # Plot
#  plotAux <- reactive({
#    # Creo mi formal context
#    fc <- getFC()
#
#    fc$find_concepts()
#    fc$find_implications()
#
#    return(fc$concepts$plot())
#  })
#
#
#  output$graphFormalConcept <- renderVisNetwork({
#    grafo <- plotAux()
#
#    # Convertir a visNetwork
#    vis_grafo <- igraph_a_visNetwork(grafo)
#
#    vis_grafo
#  })
plotAux <- reactive({
# Creo mi formal context
fc <- getFC()
fc$find_concepts()
fc$find_implications()
g <- fc$concepts$plot()
return(g)
})
output$graphFormalConcept <- renderVisNetwork({
g <- plotAux()
nodes_df <- data.frame(
id = V(g)$name,
label = V(g)$name,
title = V(g)$name
)
edges_df <- data.frame(
from = as_edgelist(g)[,1],
to = as_edgelist(g)[,2]
)
visNetwork(nodes = nodes_df, edges = edges_df) %>%
visNodes(
shape = "circle",
font = list(size = 15)
) %>%
visEdges(
arrows = list(to = list(enabled = TRUE, scaleFactor = 0.5))
) %>%
visOptions(
highlightNearest = list(enabled = TRUE, degree = 1),
selectedBy = list(variable = "label", multiple = TRUE)
) %>%
visPhysics(solver = "forceAtlas2Based") %>%
visInteraction(
navigationButtons = TRUE,
keyboard = TRUE,
dragNodes = TRUE
) %>%
visLayout(randomSeed = 123)
})
}
shinyApp(ui, server)
igraph_a_visNetwork <- function(grafo) {
# Convertir a formato visNetwork
visIgraph(grafo) %>%
visOptions(highlightNearest = TRUE,
nodesIdSelection = TRUE) %>%
visInteraction(navigationButtons = TRUE) %>%
visPhysics(solver = "forceAtlas2Based")
}
server <- function(input, output, session) {
# Evento para ir a get started
observeEvent(input$btn_start, {
updateTabItems(session, "tabs", "get_started")
})
# Fragmentos de código
output$code_fc <- renderText({
'fc <- FormalContext$new(data)\nprint(fc)'
})
output$code_concepts <- renderText({
'fc$find_concepts()\nfc$concepts'
})
output$code_implications <- renderText({
'fc$find_implications()\nfc$implications'
})
# Para cargar dataset
dataset <- import_file_server("file_dataset")
# Condicion para mostrar plot
output$datasetNull <- reactive({ is.null(dataset$data()) })
outputOptions(output, "datasetNull", suspendWhenHidden = FALSE)
# Funcion para mostrar contexto formal
getFC <- reactive({
# Creo mi formal context
if (is.null(dataset$data())) {
return(NULL)
}
fc <- FormalContext$new(dataset$data())
return(fc)
})
# Si no se han cargado datos, se muestra esta imagen
output$img_no_data <- renderImage({
list(
src = "www/oops.png",
contentType = "image/png",
alt = "No has cargado datos todavía",
class = "img_no_data"
)
}, deleteFile = FALSE)
# FC
observeEvent(input$btn_fc, {
showModal(modalDialog(
title = "Formal context",
verbatimTextOutput("fc_text"),
easyClose = TRUE
))
})
output$fc_text <- renderText({
fc <- getFC()
paste(capture.output(fc), collapse = "\n")
})
# Concepts
observeEvent(input$btn_concepts, {
showModal(modalDialog(
title = "Get concepts",
verbatimTextOutput("concepts_text"),
easyClose = TRUE
))
})
output$concepts_text <- renderText({
fc <- getFC()
fc$find_concepts()
paste(capture.output(fc$concepts), collapse = "\n")
})
# Implications
observeEvent(input$btn_implications, {
showModal(modalDialog(
title = "Get implications",
verbatimTextOutput("implications_text"),
easyClose = TRUE
))
})
output$implications_text <- renderText({
fc <- getFC()
fc$find_implications()
paste(capture.output(fc$implications), collapse = "\n")
})
# # Plot
#  plotAux <- reactive({
#    # Creo mi formal context
#    fc <- getFC()
#
#    fc$find_concepts()
#    fc$find_implications()
#
#    return(fc$concepts$plot())
#  })
#
#
#  output$graphFormalConcept <- renderVisNetwork({
#    grafo <- plotAux()
#
#    # Convertir a visNetwork
#    vis_grafo <- igraph_a_visNetwork(grafo)
#
#    vis_grafo
#  })
plotAux <- reactive({
# Creo mi formal context
fc <- getFC()
fc$find_concepts()
fc$find_implications()
g <- fc$concepts$plot()
return(g)
})
output$graphFormalConcept <- renderVisNetwork({
g <- plotAux()
nodes_df <- data.frame(
id = V(g)$name,
label = V(g)$name,
title = V(g)$name
)
edges_df <- data.frame(
from = as_edgelist(g)[,1],
to = as_edgelist(g)[,2]
)
visNetwork(nodes = nodes_df, edges = edges_df) %>%
visNodes(
shape = "circle",
font = list(size = 15)
) %>%
visEdges(
arrows = list(to = list(enabled = TRUE, scaleFactor = 0.5))
) %>%
visOptions(
highlightNearest = list(enabled = TRUE, degree = 1),
selectedBy = list(variable = "label", multiple = TRUE)
) %>%
visPhysics(solver = "forceAtlas2Based") %>%
visInteraction(
navigationButtons = TRUE,
keyboard = TRUE,
dragNodes = TRUE
) %>%
visLayout(randomSeed = 123)
})
}
header <- dashboardHeader(title = "FACR PACKAGE")
sidebar <- dashboardSidebar(
collapsed = TRUE, # la barra lateral la oculto por defecto
sidebarMenu(
id="tabs",
menuItem("Home", tabName = "home", icon = icon("home")),
menuItem("Get started", tabName = "get_started", icon = icon("play")),
menuItem("More about FCAR", tabName = "info", icon = icon("circle-info")),
menuItem("About us", tabName = "about-us", icon = icon("address-card"))
)
)
body <- dashboardBody(
tags$head(
tags$link(rel="stylesheet", type="text/css", href="style.css"),
tags$link(rel = "stylesheet", href = "https://fonts.googleapis.com/css2?family=Lora:wght@400;700&display=swap")
),
tabItems(
# Home
tabItem(tabName = "home",
fluidRow(
column(6, id="home-primero",
img(src='logo.png', class="logo")
),
column(6, id="home-segundo",
h4("fcaR: Tools for Formal Concept Analysis", class="title"),
h1("Understand the core concepts of FCA and it's implementation in R", class="main-description"),
h5("The fcaR package provides data structures which allow the user to work seamlessly with formal contexts and sets of implications.",
class="secondary-description"),
br(),
div(class="div-btn",
actionButton("btn_start", "Get started", class="btn_start"),
actionButton("btn-github", "Github docs", class="btn-github", onclick="window.open('https://github.com/Malaga-FCA-group/fcaR', '_blank')")
)
)
)
), # Fin home
# Get started
tabItem(tabName = "get_started",
fluidRow(
column(12,
box(
width = 12,
collapsible = TRUE,
collapsed = TRUE,
status = "info",
title = "Upload data",
import_file_ui("file_dataset"),
)
)
),
fluidRow(class = "box1",
column(4,
box(
width = 12,
#collapsible = TRUE,
status = "primary",
solidHeader = TRUE,
title = "Formal Context",
fluidRow(
div(class = "box-sm",
column(10, verbatimTextOutput("code_fc")),
column(2, actionButton("btn_fc", "", icon = icon("play")))
),
)
),
box(
width = 12,
#collapsible = TRUE,
status = "danger",
solidHeader = TRUE,
title = "Set of concepts",
fluidRow(
div(class = "box-sm",
column(10, verbatimTextOutput("code_concepts")),
column(2, actionButton("btn_concepts", "", icon = icon("play")))
),
)
),
box(
width = 12,
#collapsible = TRUE,
status = "success",
solidHeader = TRUE,
title = "Set of implications",
fluidRow(
div(class = "box-sm",
column(10, verbatimTextOutput("code_implications")),
column(2, actionButton("btn_implications", "", icon = icon("play")))
),
)
)
),
column(8,
box(
title = "Plot the concept lattice",
width = 12,
#collapsible = TRUE,
status = "warning",
solidHeader = TRUE,
conditionalPanel(
condition = "output.datasetNull",
imageOutput("img_no_data")
),
conditionalPanel(
condition = "!output.datasetNull",
#plotOutput("graphFormalConcept")
visNetworkOutput("graphFormalConcept", height = "600px")
)
)
)
)
)# Fin get started
)
)
ui <- dashboardPage(header, sidebar, body)
runApp()
shiny::runApp()
shiny::runApp('~/Desktop/TFG/interface_fcar')
runApp()
shiny::runApp()
shiny::runApp()
knitr::opts_chunk$set(echo = TRUE)
library(fcaR)
games <- read.csv("~/Desktop/TFG/games.csv", row.names=1)
fca <- FormalContext$new(games)
fca
fca$objects
fca$attributes
set_objects <- Set$new(fcs$objects)
set_objects <- Set$new(fca$objects)
set_objects$assign(Zelda = 1, Solid Snake = 1)
set_objects <- Set$new(fca$objects)
set_objects$assign(Zelda = 1, "Solid Snake" = 1)
fc_planets$intent(set_objects)
set_objects <- Set$new(fca$objects)
set_objects$assign(Zelda = 1, "Solid Snake" = 1)
fca$intent(set_objects)
set_objects <- Set$new(fca$objects)
set_objects$assign(Zelda = 1, Link = 1)
fca$intent(set_objects)
runApp()
shiny::runApp()
knitr::opts_chunk$set(echo = TRUE)
set_objects <- Set$new(fca$objects)
set_objects$assign(Zelda = 1)
srt_objects$assingn(Link = 1)
set_objects <- Set$new(fca$objects)
set_objects$assign(Zelda = 1)
fca$intent(set_objects)
set_objects <- Set$new(fca$objects)
set_objects$assingn(Link = 1)
set_objects$assign(Link = 1)
fca$intent(set_objects)
set_objects <- Set$new(fca$objects)
set_objects$assign(Zelda = 1)
set_objects$assign(Link = 1)
fca$intent(set_objects)
runApp()
set_objects <- Set$new(fca$objects)
set_objects$assign(Zelda = 1)
set_objects$assign(Link = 1)
print(fca$intent(set_objects))
print(fca$intent(set_objects))
set_objects <- Set$new(fca$objects)
set_objects$assign(Zelda = 1)
set_objects$assign(Link = 1)
fca$intent(set_objects)[1]
set_objects <- Set$new(fca$objects)
set_objects$assign(Zelda = 1)
set_objects$assign(Link = 1)
fca$intent(set_objects)[2]
set_objects <- Set$new(fca$objects)
set_objects$assign(Zelda = 1)
set_objects$assign(Link = 1)
fca$intent(set_objects)
set_objects <- Set$new(fca$objects)
set_objects$assign(Zelda = 1)
set_objects$assign(Link = 1)
fca$intent(set_objects)[3]
set_objects <- Set$new(fca$objects)
set_objects$assign(Zelda = 1)
set_objects$assign(Link = 1)
fca$intent(set_objects)[1]
set_objects <- Set$new(fca$objects)
set_objects$assign(Zelda = 1)
set_objects$assign(Link = 1)
fca$intent(set_objects)
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
games <- read.csv("~/Desktop/TFG/games.csv", row.names=1)
fca <- FormalContext$new(games)
length(fca$objects)
fca$obj_concept()
fca$objects
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
library(fcaR)
games <- read.csv("~/Desktop/TFG/games.csv", row.names=1)
fca <- FormalContext$new(games)
set_objects <- Set$new(fca$objects)
set_objects$assign(Zelda = 1)
fca$intent(set_objects)
set_objects$assign(Link = 1)
fca$intent(set_objects)
set_objects$assign(Zelda = 1)
set_objects$assign(Link = 1)
fca$intent(set_objects)
library(fcaR)
games <- read.csv("~/Desktop/TFG/games.csv", row.names=1)
fca <- FormalContext$new(games)
set_objects <- Set$new(fca$objects)
set_objects$assign(Zelda = 1)
set_objects$assign(Link = 1)
fca$intent(set_objects)
set_objects <- Set$new(fca$objects)
set_objects$assign(Zelda = 1, Link = 1)
#set_objects$assign(Link = 1)
fca$intent(set_objects)
set_objects <- Set$new(fca$objects)
set_objects$assign(Zelda = 1, Megaman = 1)
#set_objects$assign(Link = 1)
fca$intent(set_objects)
set_objects <- Set$new(fca$objects)
set_objects$assign(Zelda = 1)
set_objects$assign(Megaman = 1)
fca$intent(set_objects)
set_objects <- Set$new(fca$objects)
set_objects$assign(Zelda = 1)
fca$intent(set_objects)
set_objects$assign(Megaman = 1)
fca$intent(set_objects)
set_objects <- Set$new(fca$objects)
set_objects$assign(Megaman = 1)
fca$intent(set_objects)
runApp()
set_objects <- Set$new(fca$objects)
set_objects$assign(Zelda = 1)
#set_objects$assign(Megaman = 1)
fca$intent(set_objects)
runApp()
print(set_objects)
set_objects <- Set$new(fca$objects)
set_objects$assign(Zelda = 1)
#set_objects$assign(Megaman = 1)
fca$intent(set_objects)
print(set_objects[1])
print(set_objects[1])
print(set_objects)
runApp()
